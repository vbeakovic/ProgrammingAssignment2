str_split(shake, "b")
str_count(shake, pattern = "b")
str_count
x <- c(-2, -1, -2, 1)
is.positive <- function(x) x > 0
Find(is.positive, x)
Position(is.positive, x)
x <- c(-2, 1, -2, 1)
Find(is.positive, x)
Position(is.positive, x)
data(hafu)
str(hafu)
str_detect(hafu, "?")
str_detect(hafu, fixed = "?")
str_detect(hafu$Father, "?")
str_detect(hafu$Father, fixed = "?")
str_detect(hafu$Father, fixed("?"))
sum(is.na(hafu$Father))
sum(is.na(str_detect(hafu$Father, fixed("?"))))
hafu <- within(
hafu,
{
hafu$FatherQ <- str_detect(hafu$Father, fixed("?"))
hafu$MotherQ <- str_detect(hafu$Mother, fixed("?"))
}
)
str(hafu)
hafu$Father <- str_replace_all(hafu$Father, "?", "")
hafu$Father <- str_replace(hafu$Father, "?", "")
str(hafu)
hafu$Father <- str_replace(hafu$Father, "\\?", "")
str(hafu)
hafu$Father <- str_replace_all(hafu$Father, "\\?", "")
str(hafu)
str_detect(hafu$Father, fixed("?"))
hafu$Mother <- str_replace_all(hafu$Mother, "\\?", "")
library(learningr)
data(hafu)
hafu <- within(
hafu,
{
hafu$FatherQ <- str_detect(hafu$Father, fixed("?"))
hafu$MotherQ <- str_detect(hafu$Mother, fixed("?"))
}
)
library(stringr)
hafu <- within(
hafu,
{
hafu$FatherQ <- str_detect(hafu$Father, fixed("?"))
hafu$MotherQ <- str_detect(hafu$Mother, fixed("?"))
}
)
hafu$Father <- str_replace_all(hafu$Father, "\\?", "")
hafu$Mother <- str_replace_all(hafu$Mother, "\\?", "")
str(hafu)
library(reshape2)
hafu_long <- melt(hafu, id.vars = c("Father", "Mother", "Gender"))
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother", "Gender"))
?melt
str(hafu)
hafu_long <- melt(hafu, id.vars = "Gender")
hafu_long <- melt(hafu, measure.vars = c("Father", "Mother"))
head(hafu_long)
library(learningr)
obama_vs_mccain <- obama_vs_mccain[!is.na(obama_vs_mccain$Turnout), ]
with(obama_vs_mccain, plot(Income, Turnout))
with(obama_vs_mccain, plot(Income, Turnout, col = "violet", pch = 20)
with(obama_vs_mccain, plot(Income, Turnout, col = "violet", pch = 20))
with(obama_vs_mccain, plot(Income, Turnout, col = "violet", pch = 20))
with(obama_vs_mccain, plot(Income, Turnout, col = "violet", pch = 20, log = "y"))
with(obama_vs_mccain, plot(Income, Turnout, col = "violet", pch = 20, log = "xy"))
par(mar = c(3, 3, 0.5, 0.5), oma = rep.int(0, 4), mgp = c(2, 1, 0))
regions <- levels(obama_vs_mccain$Region)
plot_numbers <- seq_along(regions)
layout(matrix(plot_numbers, ncol = 5, byrow = TRUE))
with(regional_data, plot(Income, Turnout))
par(mar = c(3, 3, 0.5, 0.5), oma = rep.int(0, 4), mgp = c(2, 1, 0))
regions <- levels(obama_vs_mccain$Region)
plot_numbers <- seq_along(regions)
layout(matrix(plot_numbers, ncol = 5, byrow = TRUE))
for (region in regions) {
regional_data <- subset(obama_vs_mccain, Region == region)
with(regional_data, plot(Income, Turnout))
}
library(lattice)
xyplot(Turnout ~ Income, obama_vs_mccain)
xyplot(Turnout ~ Income, obama_vs_mccain, col = "violet", pch = 20)
xyplot(
Turnout ~ Income,
obama_vs_mccain,
scales = list(log = TRUE)
)
scales = list(y = list(log = TRUE))
xyplot(
Turnout ~ Income,
obama_vs_mccain,
scales = list(y = list(log = TRUE))
)
xyplot(
Turnout ~ Income | Region,
obama_vs_mccain,
scales = list(
log = TRUE,
relation = "same",
alternating = FALSE
)
layout = c(5, 2)
)
xyplot(
Turnout ~ Income | Region,
obama_vs_mccain,
scales = list(
log = TRUE,
relation = "same",
alternating = FALSE
),
layout = c(5, 2)
)
(lat1 <- xyplot(
Turnout ~ Income | Region,
obama_vs_mccain,
))
(lat2 <- update(lat1, col = "violet", pch = 20))
library(ggplot2)
ggplot(obama_vs_mccain, aes(Income, Turnout)) + geom_point()
ggplot(obama_vs_mccain, aes(Income, Turnout)) + geom_point(color = "violet", shape = 20)
ggplot(obama_vs_mccain, aes(Income, Turnout)) + geom_point() +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) + scale_y_log10(breaks = seq(50, 75, 5))
ggplot(obama_vs_mccain, aes(Income, Turnout)) + geom_point() +
scale_x_log10(breaks = seq(2e4, 4e4, 1e4)) + scale_y_log10(breaks = seq(50, 75, 5)) +
facet_wrap(~ Region, ncol = 4)
(gg1 <- ggplot(obama_vs_mccain, aes(Income, Turnout)) + geom_point())
(gg2 <- gg1 +
facet_wrap(~ Region, ncol = 5) +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
)
with(
crab_tag$daylog,
plot(Date, -Max.Depth, type = "l" ylim = c(-max(Max.Depth), 0))
)
with(
crab_tag$daylog,
plot(Date, -Max.Depth, type = "l", ylim = c(-max(Max.Depth), 0))
)
with(
crab_tag$daylog,
lines(Date, -Min.Depth, col = "blue")
)
xyplot(-Min.Depth + -Max.Depth ~ Date, crab_tag$daylog, type = "l")
ggplot(crab_tag$daylog, aes(Date, -Min.Depth)) + geom_line()
ggplot(crab_tag$daylog, aes(Date)) +
geom_line(aes(y = -Max.Depth)) +
geom_line(aes(y = -Min.Depth))
library(reshape2)
crab_long <- melt(
crab_tag$daylog,
id.vars = "Date",
measure.vars = c("Min.Depth", "Max.Depth")
)
head(crab_long)
ggplot(crab_long, aes(Date, -value, group = variable)) + geom_line()
ggplot(crab_tag$daylog, aes(Date, ymin = -Min.Depth, ymax = Max.Depth)) +
geom_ribbon(color = "black", fill = white)
ggplot(crab_tag$daylog, aes(Date, ymin = -Min.Depth, ymax = -Max.Depth)) +
geom_ribbon(color = "black", fill = "white")
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1,2))
ls()
vect <- makeVector(c(1, 2, 3))
vect$set
ls()
plusFunctions <- function() {
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
# the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
a <- plusFunctions()
a$plustwo(5)
a$plusthree(5)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
b <- makeVector(c(5, 1, 3))
b$get()
b$set(c(7, 4, 1, 2))
b$get()
b$setmean(10)
b$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
cachemean(a)
a$get()
a$getmean()
setwd("~/Projekti/dev/ProgrammingAssignment2")
m1 <- matrix(1:10, 2, 5)
m1
m2 <- matrix(1:10, 2, 5)
identical(m1, m2)
m1 == m2
solve(m1)
m1 <- matrix(1:9, 3, 3)
identical(m1, m2)
m2 <- matrix(9:1, 3, 3)
solve(m1)
m2 <- matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), 3, 3)
solve(m2)
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(inverse) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = inverse,
get_inverse = inverse)
}
m3 <- makeCacheMatrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
set_inverse <- function(inverse) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m3 <- makeCacheMatrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_invers()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cacheSolve(m3)
m3$get_inverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_invers()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- as.matrix(x$get())
m <- solve(data, ...)
x$set_inverse(m)
m
}
m3 <- makeCacheMatrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
cacheSolve(m3)
class(m3$get())
class(m1)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse) m <<- as.matrix(inverse)
get_inverse <- function() as.matrix(m)
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m3 <- makeCacheMatrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
class(m3)
class(m3$get())
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_invers()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cacheSolve(m3)
m3$set_inverse() <- solve(m2)
solve(m2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse = matrix()) m <<- as.matrix(inverse)
get_inverse <- function() as.matrix(m)
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m3$set_inverse() <- solve(m2)
m3$set_inverse() <- solve(m2)
m3$set_inverse(solve(m2))
m3$get()
m3$get_inverse()
m3 <- makeCacheMatrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
class(m3)
class(c(5, 8, 12, 20, 39, 46, 7, 33, 99))
class(m3$get())
m3$get()
m3 <- makeCacheMatrix(as.matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m3$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- as.matrix(y)
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse = matrix()) m <<- as.matrix(inverse)
get_inverse <- function() as.matrix(m)
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m3 <- makeCacheMatrix(as.matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m3$get()
m4 <- makeCacheMatrix(as.matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m4$get()
as.matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3)
as.matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), 3, 3)
?as.matrix
m4 <- makeCacheMatrix(matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m4$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse = matrix()) m <<- as.matrix(inverse)
get_inverse <- function() as.matrix(m)
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m4 <- makeCacheMatrix(matrix(c(5, 8, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m4$get()
m4$set_inverse(solve(m4$get()))
m4$set_inverse()
m4$get_inverse()
m4$set_inverse(solve(m4$get()))
m4$get_inverse()
m4 <- makeCacheMatrix(matrix(c(6, 9, 12, 20, 39, 46, 7, 33, 99), nrow = 3, ncol=3))
m4$get_inverse()
m4$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_invers()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
cacheSolve(m4)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse = matrix()) m <<- as.matrix(inverse)
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m4$set_inverse(solve(m4$get()))
m4$get_inverse()
cacheSolve(m4)
m4 <- makeCacheMatrix(matrix(c(6, 9, 12, 20, 39, 55, 7, 33, 99), nrow = 3, ncol=3))
m4$get_inverse()
class(m4$get_inverse())
class(m4$get())
cacheSolve(m4)
m4 <- makeCacheMatrix(matrix(c(7, 10, 13, 21, 40, 56, 8, 34, 100), nrow = 3, ncol=3))
m4$get_inverse()
cacheSolve(m4)
m4$get_inverse()
solve(m4$get_inverse())
m5 <- makeCacheMatrix(matrix(c(7, 10, 13, 21, 40, 56, 8, 34, 100, 35, 36, 37, 38, 39, 40, 41), nrow = 4, ncol=4))
cacheSolve(m5)
solve(m5$get_inverse())
m5$get_inverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get_invers()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$set_inverse(m)
m
}
m6 <- makeCacheMatrix(matrix(c(2, 2, 2, 2), nrow = 2, ncol=2))
m6
m6$get()
m6$get_inverse()
cacheSolve(m6)
m6 <- makeCacheMatrix(matrix(c(2, 5, 7, 2), nrow = 2, ncol=2))
cacheSolve(m6)
m6$set(matrix(c(2, 5, 8, 2), nrow = 2, ncol=2))
m6$get_inverse()
cacheSolve(m6)
class(m6)
m6 <- makeCacheMatrix(1)
m6$get()
class(m6$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() as.matrix(x)
set_inverse <- function(inverse = matrix()) m <<- inverse
get_inverse <- function() m
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
m7 <- makeCacheMatrix(matrix(c(11, 5, 7, 2), nrow = 2, ncol=2))
class(m7)
cacheSolve(m7)
m7$get_inverse()
m7$get()
str(m7)
m7$get()
cacheSolve(m7)
m7 <- makeCacheMatrix(matrix(c(11, 5, 12, 2), nrow = 2, ncol=2))
cacheSolve(m7)
m7
ls(environment(m7))
get("m", environment(m7))
ls()
ls(m7)
environment(m7)
search()
ls(environment(m7))
ls(envir = "m7")
ls(envir = "makeCacheMatrix")
